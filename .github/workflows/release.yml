name: Release Management

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  version-check:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_release: ${{ steps.check.outputs.should_release }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Get current version
      id: version
      run: |
        python -c "from version import get_version_info; print(f'version={get_version_info()[\"version\"]}')" >> $GITHUB_OUTPUT
    
    - name: Check if should release
      id: check
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "should_release=true" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" == "refs/heads/main" ] && [ "${{ github.event_name }}" == "push" ]; then
          echo "should_release=true" >> $GITHUB_OUTPUT
        else
          echo "should_release=false" >> $GITHUB_OUTPUT
        fi

  test:
    runs-on: ubuntu-latest
    needs: version-check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-flask
    
    - name: Run basic syntax check
      run: |
        python -m py_compile app.py
        python -m py_compile models.py
        python -m py_compile version.py
    
    - name: Check application startup
      run: |
        export FLASK_ENV=testing
        timeout 10s python app.py || echo "App startup test completed"

  create-release:
    runs-on: ubuntu-latest
    needs: [version-check, test]
    if: needs.version-check.outputs.should_release == 'true'
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Configure Git
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
    
    - name: Increment version
      id: bump
      run: |
        VERSION_TYPE="${{ github.event.inputs.version_type || 'patch' }}"
        python -c "
        from version import version_manager
        new_version = version_manager.increment_version('$VERSION_TYPE')
        print(f'new_version={new_version}')
        " >> $GITHUB_OUTPUT
    
    - name: Commit version update
      run: |
        git add version.json
        git commit -m "Bump version to ${{ steps.bump.outputs.new_version }}" || echo "No changes to commit"
    
    - name: Create Git tag
      run: |
        git tag -a "v${{ steps.bump.outputs.new_version }}" -m "Release version ${{ steps.bump.outputs.new_version }}"
    
    - name: Push changes
      run: |
        git push origin main
        git push origin --tags
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.bump.outputs.new_version }}
        release_name: Release v${{ steps.bump.outputs.new_version }}
        body: |
          ## Trade Show Expense Tracker v${{ steps.bump.outputs.new_version }}
          
          ### ðŸš€ What's New
          - Automated version management
          - Enhanced UI with version display
          - GitHub integration
          
          ### ðŸ“¦ Installation
          1. Download the source code
          2. Follow the deployment guide in README.md
          3. Configure your environment variables
          
          ### ðŸ”— Links
          - [Documentation](https://github.com/kidevu123/expenses#readme)
          - [Deployment Guide](https://github.com/kidevu123/expenses#quick-deployment-guide)
          
          ### ðŸ’¡ Need Help?
          Check the README.md for detailed setup instructions.
        draft: false
        prerelease: false

  deployment-info:
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always() && needs.create-release.result == 'success'
    
    steps:
    - name: Display deployment information
      run: |
        echo "ðŸŽ‰ Release created successfully!"
        echo "ðŸ“¦ Next steps for PythonAnywhere deployment:"
        echo "1. Download the latest release from GitHub"
        echo "2. Upload files to ~/mysite/ on PythonAnywhere"
        echo "3. Run: pip3.10 install --user -r requirements.txt"
        echo "4. Configure WSGI file with your username"
        echo "5. Set up environment variables"
        echo "6. Initialize database: python3.10 app.py"
        echo ""
        echo "ðŸ”— Repository: https://github.com/kidevu123/expenses"
        echo "ðŸ“‹ For detailed instructions, see README.md"